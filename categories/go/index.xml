<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Yerken&#39;s blog</title>
    <link>https://ideahitme.github.io/categories/go/</link>
    <description>Recent content in Go on Yerken&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Jun 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ideahitme.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go concurrency patterns</title>
      <link>https://ideahitme.github.io/posts/i-like-what-my-friends-like/</link>
      <pubDate>Thu, 22 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ideahitme.github.io/posts/i-like-what-my-friends-like/</guid>
      <description>Concurrency in Go This post is aimed at beginner/intermediate level Go developers who want to see some cool usage of Go channels and concurrency patterns. We will start with a rather simple task:
 I like to spend my time on Github browing and starring repos I like and following some really brilliant engineers. And one day I figured that most of the people I follow are gophers, which is really cool.</description>
    </item>
    
    <item>
      <title>Sparse set in Go</title>
      <link>https://ideahitme.github.io/posts/sparse-set-in-go/</link>
      <pubDate>Sat, 17 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ideahitme.github.io/posts/sparse-set-in-go/</guid>
      <description>This post is inspired by https://research.swtch.com/sparse
Complete code: https://github.com/ideahitme/go-and-learn/blob/master/golang/cgo/sparse.go
Implementing data structures in Go is easy due to the presence of slices and maps which allows data structures like queue, stack programmed in just few lines of code. Implementing sets should not be too difficult either, but let&amp;rsquo;s take a closer look at two different ways of doing it. First is the most commonly seen implementation via map and the other will utilize an interesting data structure called sparse set.</description>
    </item>
    
  </channel>
</rss>