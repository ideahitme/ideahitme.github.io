<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Yerken&#39;s blog</title>
    <link>https://ideahitme.github.io/posts/</link>
    <description>Recent content in Posts on Yerken&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 29 Jul 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ideahitme.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>IMO Problem 1</title>
      <link>https://ideahitme.github.io/posts/imo-problem-1/</link>
      <pubDate>Sat, 29 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ideahitme.github.io/posts/imo-problem-1/</guid>
      <description>Introduction IMO - is an international mathematical olympiad held every year in summer in different countries. It is the most prestigious and arguably the most difficult math olympiad for high-school students. Math problems generally require original thinking and certain theoretical background. In the next series of posts I will try to present solutions and views on the problems from the point of view of past silver medalist of this olympiad,who however did not practice math olympiad problems for almost a decade.</description>
    </item>
    
    <item>
      <title>TLS in Go</title>
      <link>https://ideahitme.github.io/posts/tls-in-go-1/</link>
      <pubDate>Tue, 18 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ideahitme.github.io/posts/tls-in-go-1/</guid>
      <description>TLS in Go This series of posts are aimed at explaining what is TLS, what are the most widely used encryption algorithms and how HTTPS works in general. These posts will be supported by examples of TLS components written using Go and its standard libraries. I am planning to write three posts and keep them extremely simple and useful for everyone new to HTTPS.
This post will explain what is HTTPS, why it is needed and will as well explain main principles of RSA</description>
    </item>
    
    <item>
      <title>Go concurrency patterns</title>
      <link>https://ideahitme.github.io/posts/i-like-what-my-friends-like/</link>
      <pubDate>Thu, 22 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ideahitme.github.io/posts/i-like-what-my-friends-like/</guid>
      <description>Concurrency in Go This post is aimed at beginner/intermediate level Go developers who want to see some cool usage of Go channels and concurrency patterns. We will start with a rather simple task:
 I like to spend my time on Github browing and starring repos I like and following some really brilliant engineers. And one day I figured that most of the people I follow are gophers, which is really cool.</description>
    </item>
    
    <item>
      <title>Sparse set in Go</title>
      <link>https://ideahitme.github.io/posts/sparse-set-in-go/</link>
      <pubDate>Sat, 17 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ideahitme.github.io/posts/sparse-set-in-go/</guid>
      <description>This post is inspired by https://research.swtch.com/sparse
Complete code: https://github.com/ideahitme/go-and-learn/blob/master/golang/cgo/sparse.go
Implementing data structures in Go is easy due to the presence of slices and maps which allows data structures like queue, stack programmed in just few lines of code. Implementing sets should not be too difficult either, but let&amp;rsquo;s take a closer look at two different ways of doing it. First is the most commonly seen implementation via map and the other will utilize an interesting data structure called sparse set.</description>
    </item>
    
    <item>
      <title>Is this thing on?</title>
      <link>https://ideahitme.github.io/posts/intro/</link>
      <pubDate>Thu, 15 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ideahitme.github.io/posts/intro/</guid>
      <description>Some mathematician, I believe, has said that true pleasure lies not in the discovery of truth, but in the search for it.
 Tolstoy</description>
    </item>
    
  </channel>
</rss>